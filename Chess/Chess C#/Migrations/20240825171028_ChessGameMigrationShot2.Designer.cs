// <auto-generated />
using System;
using Chess_C_.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chess_C_.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240825171028_ChessGameMigrationShot2")]
    partial class ChessGameMigrationShot2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Chess_C_.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Games", "ChessGame", t =>
                        {
                            t.HasCheckConstraint("CK_GAME_STATUS", "Status IN ('ACTIVE', 'WHITE_WIN', 'BLACK_WIN', 'DRAW', 'RESIGN')");
                        });
                });

            modelBuilder.Entity("Chess_C_.Models.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Invitations", "ChessGame", t =>
                        {
                            t.HasCheckConstraint("CK_INVITATION_STATUS", "Status IN ('ACTIVE, ACCEPTED, CANCELLED')");
                        });
                });

            modelBuilder.Entity("Chess_C_.Models.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FromSquareColumn")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("CHAR");

                    b.Property<string>("FromSquareRow")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("CHAR");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCastling")
                        .HasColumnType("BIT");

                    b.Property<string>("KilledPieceType")
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("PieceColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("PieceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToSquareColumn")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("CHAR");

                    b.Property<string>("ToSquareRow")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("CHAR");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Moves", "ChessGame", t =>
                        {
                            t.HasCheckConstraint("CK_KILLED_PIECE_TYPE", "[KilledPieceType] IS NULL OR [KilledPieceType] IN ('PAWN', 'BISHOP', 'KNIGHT', 'ROOK', 'QUEEN', 'KING')");

                            t.HasCheckConstraint("CK_PIECE_COLOR", "PieceColor IN ('WHITE', 'BLACK')");

                            t.HasCheckConstraint("CK_PIECE_TYPE", "PieceType IN ('PAWN', 'BISHOP', 'KNIGHT', 'ROOK', 'QUEEN', 'KING')");
                        });
                });

            modelBuilder.Entity("Chess_C_.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Players", "ChessGame", t =>
                        {
                            t.HasCheckConstraint("CK_ACCOUNT_STATUS", "AccountStatus IN ('ACTIVE', 'BANNED', 'BLOCKED')");

                            t.HasCheckConstraint("CK_PLAYER_ZIPCODE", "LEN(ZipCode) = 5 OR LEN(ZipCode) = 9");
                        });
                });

            modelBuilder.Entity("Chess_C_.Models.PlayerGame", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlayerId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("PlayerGames", "ChessGame");
                });

            modelBuilder.Entity("Chess_C_.Models.PlayerPhone", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("PlayerId", "Phone");

                    b.ToTable("PlayerPhones", "ChessGame");
                });

            modelBuilder.Entity("Chess_C_.Models.Invitation", b =>
                {
                    b.HasOne("Chess_C_.Models.Player", "Receiver")
                        .WithMany("ReceiveInvitations")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PLAYER_RECEIVE");

                    b.HasOne("Chess_C_.Models.Player", "Sender")
                        .WithMany("SendInvitations")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PLAYER_SEND");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Chess_C_.Models.Move", b =>
                {
                    b.HasOne("Chess_C_.Models.Game", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GAME_MOVE");

                    b.HasOne("Chess_C_.Models.Player", "Player")
                        .WithMany("Moves")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PLAYER_MOVE");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Chess_C_.Models.PlayerGame", b =>
                {
                    b.HasOne("Chess_C_.Models.Game", "Game")
                        .WithMany("PlayerGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GAME_PLAYER_GAME");

                    b.HasOne("Chess_C_.Models.Player", "Player")
                        .WithMany("PlayerGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PLAYER_PLAYER_GAME");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Chess_C_.Models.PlayerPhone", b =>
                {
                    b.HasOne("Chess_C_.Models.Player", "Player")
                        .WithMany("Phones")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Chess_C_.Models.Game", b =>
                {
                    b.Navigation("Moves");

                    b.Navigation("PlayerGames");
                });

            modelBuilder.Entity("Chess_C_.Models.Player", b =>
                {
                    b.Navigation("Moves");

                    b.Navigation("Phones");

                    b.Navigation("PlayerGames");

                    b.Navigation("ReceiveInvitations");

                    b.Navigation("SendInvitations");
                });
#pragma warning restore 612, 618
        }
    }
}
